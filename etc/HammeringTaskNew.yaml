---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: false
# Where to look for state libraries
StatesLibraries:
  - "@MC_STATES_DEFAULT_INSTALL_PREFIX@"
  - "@STATES_INSTALL_PREFIX@/@PROJECT_NAME@/states"
# Where to look for state files
StatesFiles:
  - "@MC_STATES_DEFAULT_INSTALL_PREFIX@/data"
  - "@STATES_INSTALL_PREFIX@/@PROJECT_NAME@/states/data" 
# If true, state factory will be more verbose
VerboseStateFactory: false
# Additional robots to load
robots:
  ground:
    module: env/ground
  nail:
    module: object/nail
    init_pos:
      translation: [0.55, 0.30 , 0.9]
      rotation: [0.0, 0.0, 1.57]



# General constraints, always on
constraints:
- type: contact
- type: dynamics
  damper: [0.1, 0.01, 0.5]
- type: compoundJoint

# Collision constraint
collisions:
- type: collision
  useMinimal: true
# - type: collision
#   r1: hrp5_p
#   r2: nail
  # collisions:
  #   body1: hammer
  #   body2: nail

contacts:
- r2: ground
  r1Surface: LeftFoot
  r2Surface: AllGround
- r2: ground
  r1Surface: RightFoot
  r2Surface: AllGround

states:
  CoM:
    base: MetaTasks
    tasks:
      CoM:
        type: com
        com: [0.0, 0.0, 1.00]
        weight: 3000
        stiffness: 100  
        
  Hammer::PostureTask:
    base: MetaTasks
    tasks:
      Posture:
        type: posture
        stiffness: 1.0
        weight: 1.0
        # posture:
        #   - [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7]
        #   - [0]
        #   - []
        #   - [1.5]

  Hammer::Standing:
    base: MetaTasks
    tasks:
      Stabilizer:
        type: lipm_stabilizer
        enabled: true
        contacts: [Left, Right]
        leftFootSurface: LeftFootCenter
        rightFootSurface: RightFootCenter
        torsoBodyName: Chest_Link2

        dcm_tracking:
          gains:
            prop: [0,0]
            integral: [0,0]
            deriv: [0., 0.]
            comdError: 0.
        admittance:
          copFzLambda: [30,30,30]
          copFzDelay: 0.0
          df: [0.0, 0.0, 0.0001]
          cop: [0.01, 0.01]
          maxVel:
            angular: [3., 3., 3.]
            linear: [1., 1., 1.]
        tasks:
          contact:
            constrainCoP: false
            damping: 150.0
          com:
            stiffness: [100.,100.,100.]
            dimWeight: [1 , 1 , 1]
            weight: 5000
            height: 0.92
    
  Initial_And_Standing: 
    base: Parallel
    states: [Hammer::Standing, Hammering_FSM_Controller_Initial]



  Hammer::Get_In_Position_Task:
    base: Get_In_Position_Task

    timestep: 0.002 #s, in the mc rtc config file


    gui:
      stop_hammering_button_name: "Stop hammering"

    quality_of_life:
      bezier_curve_verbose_active: false
      jacobian_verbose_active: false

    frames:
      Hammer_Head_frame: "Hammer_Head"
      nail: "nail"
    
    magic_values:
      # max_control_point_height: 1.733 #found by calculation with the ndcurves doc with the added control points
      max_control_point_height: 2

      bezier_curve_max_duration: 1
      task_stiffness: 5000
      task_weight: 10
      epsilon: 0.02
      oriWp_time: 0.9
      force_norm_threshold: 1
      posture_task_weight: 1
      effective_mass_maximization_task_weight: 1

    curve_constraints:
      linear_velocity:
        x:
          init: 0
          end: 0
        y: 
          init: 0
          end: 0
        z:
          init: 0
          end: -2
      linear_acceleration:
        x:
          init: 0
          end: 0
        y: 
          init: 0
          end: 0
        z:
          init: 0
          end: 0
      linear_jerk:
        x:
          init: 0
          end: 0
        y: 
          init: 0
          end: 0
        z:
          init: 0
          end: 0


  # Hammer::Hit:
  #   base: Hit_Task

  #   timestep: 0.002 #s
    
  #   gui:
  #     stop_hammering_button_name: "Stop hammering"

  #   quality_of_life:
  #     bezier_curve_verbose_active: false

  #   frames:
  #     Hammer_Head_frame: "Hammer_Head"
  #     nail: "nail"
    
  #   magic_values:
  #     max_control_point_height: 2.15
  #     bezier_curve_max_duration: 1
  #     task_stiffness: 100
  #     task_weight: 1000
  #     epsilon: 0.13
  #     oriWp_time: 3
    #   force_norm_threshold: 1

    # curve_constraints:
    #   linear_velocity:
    #     x:
    #       init: 0
    #       end: 0
    #     y: 
    #       init: 0
    #       end: 0
    #     z:
    #       init: 0
    #       end: -1

    #   linear_acceleration:
    #     x:
    #       init: 0
    #       end: 0
    #     y: 
    #       init: 0
    #       end: 0
    #     z:
    #       init: -1
    #       end: 0
    #   linear_jerk:
    #     x:
    #       init: 0
    #       end: 0
    #     y: 
    #       init: 0
    #       end: 0
    #     z:
    #       init: 0
    #       end: 0


  # Hammer::Posture_with_CoM:
  #   base: Parallel
  #   states: [CoM, Hammer::PostureTask]


  # Hammer::Post_Impact_Task:
  #   base: Post_Impact_Task

  #   quality_of_life:
  #     bezier_curve_verbose_active: false

  #   frames:
  #     Hammer_Head_frame: "Hammer_Head"

  #   magic_values:
  #     epsilon: 0.2
  #     bezier_curve_max_duration: 2
  #     task_stiffness: 100
  #     task_weight: 1000
  #     post_impact_final_height: 1
  #     coefficient_of_restitution: 0.46 #Dont fully trust that value I got it from google AI for iron-alumimium collision  

  #   curve_constraints:
  #     linear_velocity:
  #       z:
  #         init: 0
  #         end: 0


  Get_In_Position_And_Standing: 
    base: Parallel
    states: [Hammer::Standing, Hammer::Get_In_Position_Task]

  Get_In_Position_NoLIPM: 
    base: Parallel
    states: [Hammer::Get_In_Position_Task]

  Get_In_Position_And_Standing_With_CoM: 
    base: Parallel
    states: [Hammer::Standing, Hammer::Get_In_Position_Task, CoM]


  Hit:
    base: Parallel
    states: [Hammer::Standing, Hammer::Hit]

  Hammer::HammeringFSM_Finish: 
    base: Parallel
    states: [Hammer::Standing]
  
  Hammer::HammeringFSM:
    base: Meta 
    transitions:
      # - [Initial_And_Standing, BUTTON_CLICKED, Get_In_Position_And_Standing, Auto]
      - [Initial_And_Standing, BUTTON_CLICKED, Get_In_Position_NoLIPM, Auto]


      # - [Initial_And_Standing, BUTTON_CLICKED, Hammer::Posture_with_CoM, Auto]

      # - [Get_In_Position_And_Standing, STOP, Hammer::HammeringFSM_Finish, Auto]
      # - [Get_In_Position_And_Standing, STOP, Hit, Auto]

      # - [Get_In_Position_NoLIPM, STOP, Initial_And_Standing, Auto]
      - [Get_In_Position_NoLIPM, STOP, Hammer::HammeringFSM_Finish, Auto]

      

      # - [Hit, IMPACT_DETECTED, Initial_And_Standing, Auto]

      # - [Hit, IMPACT_DETECTED, Hammer::HammeringFSM_Finish, Auto]
      # - [Hammer::HammeringFSM_Finish, HAMMERING_HEIGHT_REACHED, Initial_And_Standing, Auto]


      # - [Hammer::HammeringFSM_Hammering, Stop , Hammer::HammeringFSM_Finish, Auto]
      # - [Hammer::HammeringFSM_Finish, Auto , Hammer::HammeringFSM_Initial, Auto]
      # - [Hammer::HammeringFSM_Finish, Start , Hammer::HammeringFSM_Hammering, Auto]

# Transitions map
transitions:
- [Hammer::HammeringFSM, OK, Hammer::HammeringFSM, Strict]

# Initial state
init: Hammer::HammeringFSM

hrp5_p:
  posture:
    stiffness: 5
    weight: 1
  
ObserverPipelines:
  name: "ObserverPipeline"
  gui: true
  observers:
    - type: Encoder
      config:
        velocity: encoderVelocities
    - type: Attitude
      update: true
    - type: KinematicInertial
      update: true
      config:
        anchorFrame:
          maxAnchorFrameDiscontinuity: 0.05 # [m]
    - type: BodySensor
      update: true
      config:  
        bodySensor: FloatingBase
