---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: false
# Where to look for state libraries
StatesLibraries:
  - "@MC_STATES_DEFAULT_INSTALL_PREFIX@"
  - "@STATES_INSTALL_PREFIX@/@PROJECT_NAME@/states"
# Where to look for state files
StatesFiles:
  - "@MC_STATES_DEFAULT_INSTALL_PREFIX@/data"
  - "@STATES_INSTALL_PREFIX@/@PROJECT_NAME@/states/data" 
# If true, state factory will be more verbose
VerboseStateFactory: false



# Additional robots to load
robots:
  ground:
    module: env/ground
  nail:
    module: object/nail
    init_pos:
      translation: [0.55, 0.30 , 0.9]
      rotation: [0, 0, 1.57]



# General constraints, always on
constraints:
- type: contact
- type: dynamics
  damper: [0.1, 0.01, 0.5]
- type: compoundJoint

# Collision constraint
collisions:
- type: collision
  useMinimal: true
# - type: collision
#   r1: hrp5_p
#   r2: nail
  # collisions:
  #   body1: hammer
  #   body2: nail

contacts:
- r2: ground
  r1Surface: LeftFoot
  r2Surface: AllGround
- r2: ground
  r1Surface: RightFoot
  r2Surface: AllGround

global_controller_params:
  timestep: 0.002 #s, in the mc rtc config file
  gui:
    stop_hammering_button_name: "Stop hammering"

  quality_of_life:
    bezier_curve_verbose_active: false
    jacobian_verbose_active: false
 
  frames:
    Hammer_Head_frame: "Hammer_Head"
    nail: "nail"
      
  magic_values:
    #No real meaning behind these values
    magic_force_threshold: 1


states:

  Hammer::Get_In_Position_Task:
    #c.f. Get_In_Position_Task.cpp (though it needs a better name now)
    base: Get_In_Position_Task

    magic_values:
      #No real meaning behind these values

      #Set to 0 to disable BSplineTask
      magic_BSpline_task_weight: 1
      
      magic_BSpline_max_duration: 1 #seconds
      magic_BSpline_task_stiffness: 100000
      magic_BSpline_task_dimweight_x: 10000
      magic_BSpline_task_dimweight_y: 10000
      magic_BSpline_task_dimweight_z: 1

      magic_posture_task_weight: 1

      #Set to 0 to disable EMMT
      magic_effective_mass_maximization_task_weight: 100

      #Set to 0 to disable VectorOrientationTask
      magic_vector_orientation_task_weight: 10

      magic_vector_orientation_task_stiffness: 250

      gripper_task_stiffness: 100
      gripper_task_weight: 500000

    curve_constraints:
      # Normal velocity of the hammer tip at the nail
      magic_normal_final_velocity: [0, 0, -2]
      
      linear_velocity:
        x:
          init: 0
        y: 
          init: 0
        z:
          init: 0
      linear_acceleration:
        x:
          init: 0
          end: 0
        y: 
          init: 0
          end: 0
        z:
          init: 0
          end: 0
      
      orientation:
        enable_BSpline_orientation: false

  Hammer::Post_Impact_Task:
    #c.f. Post_Impact_Task.cpp
    base: Post_Impact_Task

    magic_values:
      #No real meaning behind these values
      magic_posture_task_weight: 100
      magic_posture_task_stiffness: 100
      magic_posture_task_epsilon: 0.15

  # ------------------------ not directly used states ----------------------
  CoM:
    base: MetaTasks
    tasks:
      CoM:
        type: com
        com: [0.0, 0.0, 1.00]
        weight: 3000
        stiffness: 100  
        
  #LIPM
  Hammer::Standing:
    base: MetaTasks
    tasks:
      Stabilizer:
        type: lipm_stabilizer
        enabled: true
        contacts: [Left, Right]
        leftFootSurface: LeftFootCenter
        rightFootSurface: RightFootCenter
        torsoBodyName: Chest_Link2

        dcm_tracking:
          gains:
            prop: [0,0]
            integral: [0,0]
            deriv: [0., 0.]
            comdError: 0.
        admittance:
          copFzLambda: [30,30,30]
          copFzDelay: 0.0
          df: [0.0, 0.0, 0.0001]
          cop: [0.01, 0.01]
          maxVel:
            angular: [3., 3., 3.]
            linear: [1., 1., 1.]
        tasks:
          contact:
            constrainCoP: false
            damping: 150.0
          com:
            stiffness: [100.,100.,100.]
            dimWeight: [1 , 1 , 1]
            weight: 5000
            height: 0.92

      
  Initial_And_Standing_LIPM: 
    base: Parallel
    states: [Hammer::Standing, HammeringTaskNew_Initial]

  Get_In_Position_And_Standing_LIPM: 
    base: Parallel
    states: [Hammer::Standing, Hammer::Get_In_Position_Task]



  # ------------------ State using transitions between defined states ----------------------
  Hammer::HammeringFSM:
    base: Meta
    transitions:
      - [HammeringTaskNew_Initial, BUTTON_CLICKED, Hammer::Get_In_Position_Task, Auto]
      - [Hammer::Get_In_Position_Task, STOP, Hammer::Post_Impact_Task, Auto]
      - [Hammer::Post_Impact_Task, STOP, HammeringTaskNew_Initial, Auto] # TODO: let it go to some other task that does not initialize the logging etc again


# Transitions map
transitions:
- [Hammer::HammeringFSM, OK, Hammer::HammeringFSM, Strict]

# Initial state
init: Hammer::HammeringFSM

hrp5_p:
  posture:
    stiffness: 5
    weight: 1
  
ObserverPipelines:
  name: "ObserverPipeline"
  gui: true
  observers:
    - type: Encoder
      config:
        velocity: encoderVelocities
    - type: Attitude
      update: true
    - type: KinematicInertial
      update: true
      config:
        anchorFrame:
          maxAnchorFrameDiscontinuity: 0.05 # [m]
    - type: BodySensor
      update: true
      config:  
        bodySensor: FloatingBase